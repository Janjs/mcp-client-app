/**
 * Types for the conversations feature.
 * This file defines the structure for conversations and related entities.
 */

import {
  CoreAssistantMessage,
  CoreMessage,
  CoreToolMessage,
  CoreUserMessage,
  ToolCall,
} from "ai";

/**
 * Represents a conversation with an AI model.
 * Conversations are stored as JSON files in the vault.
 */
export interface Conversation {
  /** Unique identifier for the conversation */
  id: string;

  /** User-friendly name for the conversation */
  name: string;

  /** ISO timestamp when the conversation was created */
  createdAt: string;

  /** ISO timestamp when the conversation was last updated */
  updatedAt: string;

  /** Array of messages in the conversation */
  messages: CoreMessage[];
}

export type SendMessageParams = {
  conversationId: string;
  providerName: string;
  modelName: string;
  messageId: string; // Id for the message that was sent
  responseId: string; // Id for the response that will be received
  message: CoreMessage;
};

/**
 * Conversation with file path information
 */
export interface ConversationWithPath extends Conversation {
  /** Path to the conversation file */
  path: string;
}

/**
 * Registry of all conversations in a vault
 */
export interface ConversationsRegistry {
  conversations: Record<string, ConversationWithPath>;
}

/**
 * Type for the streaming message chunk,
 * We use the id to identify the chunk and optmize renders on the client side
 */
export type StreamingMessageChunk = {
  id: string;
  content: string;
};

/**
 * Type for the streaming message event
 */
export interface MessageStreamEvent {
  conversationId: string;
  messageId: string;
  responseId: string;
  chunk: StreamingMessageChunk;
}

/**
 * Type for the streaming message
 */
export type StreamingMessage = {
  messageId: string;
  chunks: StreamingMessageChunk[];
  toolCalls?: ToolCallEvent[];
};

/**
 * Type for the message added event
 */
export interface MessageAddedEvent {
  conversationId: string;
  message: CoreMessage;
}

/**
 * Type for the tool call event
 */
export interface ToolCallEvent {
  conversationId: string;
  messageId: string;
  responseId: string;
  toolCall: ToolCall<string, Record<string, unknown>>;
}

/**
 * Type for the tool call response event
 */
export interface ToolCallResponseEvent {
  conversationId: string;
  messageId: string;
  toolCallId: string;
  response: Record<string, unknown>;
}

/**
 * Type for the message completion event
 */
export interface MessageCompletionEvent {
  conversationId: string;
  messageId: string;
  responseId: string;
  responseMessages: ResponseMessage[];
}

/**
A message that was generated during the generation process.
It can be either an assistant message or a tool message.
 */
export type ResponseMessage = (CoreAssistantMessage | CoreToolMessage) & {
  /**
Message ID generated by the AI SDK.
*/
  id: string;
};

/**
 * Type for the message error event
 */
export interface MessageErrorEvent {
  conversationId: string;
  messageId: string;
  responseId: string;
  error: string;
}

/**
 * Type for the tool call user response
 */
export interface ToolCallUserResponse {
  conversationId: string;
  toolCallId: string;
  approved: boolean;
  args?: Record<string, unknown>;
}

/**
 * LLM communication channels for IPC
 */
export const LLM_CHANNELS = {
  SEND_MESSAGE: "llm:sendMessage",
  TOOL_CALL: "llm:toolCall",
  TOOL_CALL_RESPONSE: "llm:toolCallResponse",
  MESSAGE_COMPLETION: "llm:messageCompletion",
  MESSAGE_ERROR: "llm:messageError",
  MESSAGE_STREAM: "llm:messageStream",
};

/**
 * Channel names for IPC communication
 */
export const CONVERSATIONS_CHANNELS = {
  GET_CONVERSATIONS: "conversations:getConversations",
  GET_CONVERSATION: "conversations:getConversation",
  CREATE_CONVERSATION: "conversations:createConversation",
  UPDATE_CONVERSATION: "conversations:updateConversation",
  DELETE_CONVERSATION: "conversations:deleteConversation",
  MESSAGE_ADDED: "conversations:messageAdded",
  ADD_MESSAGE: "conversations:addMessage",
  CONFIRM_TOOL_CALL: "conversations:confirmToolCall",
};
